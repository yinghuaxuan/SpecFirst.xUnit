namespace SpecFirst.TestGenerator.xUnit.Template
{
    public class XUnitTemplate
    {
        public const string TEST_TEMPLATE =
@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SpecFirst source generator.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace {{namespace_name}}
{
    using System;
    using System.Collections.Generic;
    using Xunit;
    
    {{#each list_of_fixtures}}
    {{> TEST_NAME_TEMPLATE}}
    {
        {{> CLASS_VARIABLE_TEMPLATE}}
        [Theory]
        [MemberData(nameof(get_test_data))]
        {{> TEST_METHOD_TEMPLATE}}
        {
            {{> DECORATION_VARIABLE_TEMPLATE}}
            {{> IMPL_METHOD_CALL_EXPRESSION_TEMPLATE}}
            {{> ASSERT_STATEMENT_TEMPLATE}}
        }

        {{> TEST_DATA_TEMPLATE}}

        {{> IMPL_METHOD_TEMPLATE}}

        {{> DECORATION_METHOD_TEMPLATE}}
    }

    {{/each}}
}";

        public const string IMPLEMENTATION_TEMPLATE = 
@"namespace {{namespace_name}}
{
    using System;

    {{#each list_of_fixtures}}
    public partial class {{class_name}}
    {
        private partial {{impl_return_types}} {{class_name}}_implementation({{impl_parameters}})
        {
            throw new NotImplementedException();
        }
    }

    {{/each}}
}";

        public const string TEST_DATA_TEMPLATE = 
@"        public static IEnumerable<object[]> get_test_data()
        {
            var data = new List<object[]>
            {
                {{#each test_data_and_comments}}
                new object[] { {{{this.TestData}}} }, // {{{this.Comment}}}
                {{else}}
                new object[] { {{{this.TestData}}} },
                {{/if}}
                {{/each}}
            };

            return data;
        }
";

        public const string IMPL_METHOD_TEMPLATE =
@"        private partial {{impl_return_types}} {{class_name}}_implementation({{impl_input_parameters}});
";

        public const string DECORATION_METHOD_TEMPLATE =
@"        {{#each decoration_methods}}
        private partial {{this.ReturnType}} {{this.ParameterName}}_implementation({{this.InputParameters}});
        {{/each}}
";

        public const string CLASS_VARIABLE_TEMPLATE =
@"        {{#if class_variables}}
        {{#each class_variables}}
        {{#if this.VariableValue}}
        private static readonly {{this.VariableType}} {{this.VariableName}} = {{{this.VariableValue}}};
        {{else}}
        private static readonly {{this.VariableType}} {{this.VariableName}};
        {{/if}}
        {{/each}}


        {{/if}}";

        public const string TEST_METHOD_TEMPLATE =
@"        public void {{class_name}}_tests({{test_parameters}})
";

        public const string IMPL_METHOD_CALL_EXPRESSION_TEMPLATE =
@"            {{#if impl_return_values}}
            {{impl_return_values}} = {{class_name}}_implementation({{impl_arguments}});
            {{else}}
            {{class_name}}_implementation({{impl_arguments}});
            {{/if}}";

        public const string ASSERT_STATEMENT_TEMPLATE =
@"            {{#each assert_statements}}
            {{{this}}};
            {{/each}}";

        public const string DECORATION_VARIABLE_TEMPLATE =
@"          {{#each decoration_variables}}
            {{{this}}};
            {{/each}}

";

        public const string TEST_NAME_TEMPLATE = 
@"    public partial class {{class_name}}
";
    }
}
