
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SpecFirst source generator.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpecFirst.TestGenerator.xUnit.Specs.Tests
{
    using System;
    using System.Collections.Generic;
    using Xunit;
    
    public partial class generate_xunit_tests
    {
        private static readonly string decision_table = "<table>\n  <tbody>\n    <tr>\n      <td colspan=\"3\"> Parse a decision table </td>\n    </tr>\n    <tr>\n      <td> #Description </td>\n      <td> Integer </td>\n      <td> Decimal </td>\n      <td> Double </td>\n      <td> Boolean? </td>\n      <td> <a href=\"#\" title=\"ignore_case|ignore_all_spaces|ignore_line_ending\" data-href=\"#\">string</a>? </td>\n      <td> DateTime? </td>\n    </tr>\n    <tr>\n      <td> Row 1 </td>\n      <td> 12 </td>\n      <td> 12.5M </td>\n      <td> 12.5 </td>\n      <td> True </td>\n      <td> \"text\" </td>\n      <td> 2012-03-26 12:12:12 </td>\n    </tr>\n    <tr>\n      <td> Row 2 </td>\n      <td> 12 </td>\n      <td> 12.5M </td>\n      <td> 12.5D </td>\n      <td> False </td>\n      <td> \"text\" </td>\n      <td> 2012-03-26 12:12:12 </td>\n    </tr>\n    <tr>\n      <td> Row 3 </td>\n      <td> 12 </td>\n      <td> 12M </td>\n      <td> 12D </td>\n      <td> false </td>\n      <td> \"text\" </td>\n      <td> 2012-03-26 12:12:12 </td>\n    </tr>\n  </tbody>\n</table>\n";
        private static readonly string xunit_test = "\npublic partial class parse_a_decision_table\n{\n  [Theory]\n  [MemberData(nameof(get_test_data))]\n  public void parse_a_decision_table_tests(string decision_table, string table_type, string table_name, string input_table_header, string output_table_header, string comment_table_header)\n  {\n    (string table_type_output, string table_name_output, string input_table_header_output, string output_table_header_output, string comment_table_header_output) = parse_a_decision_table_implementation(decision_table);\n    Assert.Equal(table_type_output, table_type);\n    Assert.Equal(table_name_output, table_name);\n    Assert.Equal(input_table_header_output, input_table_header);\n    Assert.Equal(output_table_header_output, output_table_header);\n    Assert.Equal(comment_table_header_output, comment_table_header);\n  }\n<br/>\n  public static IEnumerable<object[]> get_test_data()\n  {\n    var data = new List<object[]>\n    {\n      new object[] { 12, 12.5M, 12.5D, true, \"text\", new DateTime(2012, 3, 26, 12, 12, 12, 0) }, // Row 1\n      new object[] { 12, 12.5M, 12.5D, false, \"text\", new DateTime(2012, 3, 26, 12, 12, 12, 0) }, // Row 2\n      new object[] { 12, 12M, 12D, false, \"text\", new DateTime(2012, 3, 26, 12, 12, 12, 0) }, // Row 3\n    };\n<br/>\n    return data;\n  }\n<br/>\n  private partial (string, string, string, string, string) parse_a_decision_table_implementation(string decision_table);\n}";
        
        [Theory]
        [MemberData(nameof(get_test_data))]
        public void generate_xunit_tests_tests(string decision_table, string test_data)
        {
            string test_data_output = generate_xunit_tests_implementation(decision_table);
            Assert.Equal(test_data_output, test_data);
        }

        public static IEnumerable<object[]> get_test_data()
        {
            var data = new List<object[]>
            {
                new object[] { decision_table, xunit_test }, // Generate test data
            };

            return data;
        }

        private partial string generate_xunit_tests_implementation(string decision_table);
    }

}