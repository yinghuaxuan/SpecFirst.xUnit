//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SpecFirst source generator.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpecFirst.Core.Specs.Tests.DecisionTable.Validator.DecisionTableValidator
{
    using System;
    using System.Collections.Generic;
    using Xunit;
    
    public partial class is_table_a_decision_table
    {
        private static readonly string table_with_one_row = "<table>   <tbody>     <tr>       <td> Column </td>     </tr>   </tbody> </table> ";
        private static readonly string table_with_three_row_and_multi_columns = "<table>   <tbody>     <tr>       <td> Column 1 </td>       <td> Column 2 </td>     </tr>     <tr>       <td> Column 1 </td>       <td> Column 2 </td>     </tr>     <tr>       <td> Column 1 </td>       <td> Column 2 </td>     </tr>   </tbody> </table> ";
        private static readonly string table_with_missing_data_in_first_row = "<table>   <tbody>     <tr>       <td colspan=\"2\">  </td>     </tr>     <tr>       <td> Column 1 </td>       <td> Column 2 </td>     </tr>     <tr>       <td> Column 1 </td>       <td> Column 2 </td>     </tr>   </tbody> </table> ";
        private static readonly string table_with_missing_data_in_second_row = "<table>   <tbody>     <tr>       <td colspan=\"2\"> Column 1 </td>     </tr>     <tr>       <td> Column 1 </td>       <td>  </td>     </tr>     <tr>       <td> Column 1 </td>       <td> Column 2 </td>     </tr>   </tbody> </table> ";
        private static readonly string table_with_only_comments = "<table>   <tbody>     <tr>       <td colspan=\"2\"> Table Name </td>     </tr>     <tr>       <td> #Table Header 1 </td>       <td> #Table Header 2 </td>     </tr>     <tr>       <td> Table Data 1 </td>       <td> Table Data 2 </td>     </tr>   </tbody> </table> ";
        private static readonly string decision_table = "<table>   <tbody>     <tr>       <td colspan=\"2\"> Table Name </td>     </tr>     <tr>       <td> Table Header 1 </td>       <td> Table Header 2? </td>     </tr>     <tr>       <td> Table Data 1 </td>       <td> Table Data 2 </td>     </tr>   </tbody> </table> ";
        private static readonly string decision_table_with_theader = "<table>   <thead>     <tr>       <td colspan=\"2\"> Table Name </td>     </tr>     <tr>       <td> Table Header 1 </td>       <td> Table Header 2? </td>     </tr>   </thead>   <tbody>     <tr>       <td> Table Data 1 </td>       <td> Table Data 2 </td>     </tr>   </tbody> </table> ";
        private static readonly string comment_decision_table = "<table>   <tbody>     <tr>       <td colspan=\"2\"> comment:Table Name </td>     </tr>     <tr>       <td> Table Header 1 </td>       <td> Table Header 2? </td>     </tr>     <tr>       <td> Table Data 1 </td>       <td> Table Data 2 </td>     </tr>   </tbody> </table> ";
        private static readonly string setup_decision_table = "<table>   <tbody>     <tr>       <td colspan=\"2\"> setup:Column 1 </td>     </tr>     <tr>       <td> Table Header 1 </td>       <td> Table Header 2? </td>     </tr>     <tr>       <td> Table Data 1 </td>       <td> Table Data 2 </td>     </tr>   </tbody> </table> ";

        [Theory]
        [MemberData(nameof(get_test_data))]
        public void is_table_a_decision_table_tests(string decision_table, bool is_valid, string validation_error)
        {
            (bool is_valid_output, string validation_error_output) = is_table_a_decision_table_implementation(decision_table);
            Assert.Equal(is_valid_output, is_valid);
            Assert.Equal(validation_error_output, validation_error);
        }

        public static IEnumerable<object[]> get_test_data()
        {
            var data = new List<object[]>
            {
                new object[] { table_with_one_row, false, "Decision table must have at least three rows" }, // Table with only 1 row
                new object[] { table_with_three_row_and_multi_columns, false, "The first row of the decision table must have a single column" }, // Table with 3 rows but the first row has multiple columns
                new object[] { table_with_missing_data_in_first_row, false, "The first row of the decision table must contain some text" }, // Table with no text in the first row
                new object[] { table_with_missing_data_in_second_row, false, "The second row of the decision table must contain some text in each column" }, // Table with missing text in the second row
                new object[] { table_with_only_comments, false, "The second row of the decision table must contains at least one column that is not a comment column" }, // Table with only comments
                new object[] { decision_table, true, null }, // A valid decision table
                new object[] { decision_table_with_theader, true, null }, // A valid decision table with thead section
                new object[] { comment_decision_table, true, null }, // A valid comment decision table
                new object[] { setup_decision_table, true, null }, // A valid setup decision table
            };

            return data;
        }

        private partial (bool, string) is_table_a_decision_table_implementation(string decision_table);

    }

}